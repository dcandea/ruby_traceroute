class MsfRunMod
  def initialize(modargs)
    @args      = modargs
    @indent    = '   '
    @framework = nil
    @capture = ''
     
    if @args[:module_name] =~ /^exploit(s)*\//i   
      @args[:module_name] = @args[:module_name].split('/')
      @args[:module_name] = @args[:module_name][1, @args[:module_name].length] * "/"
    end   
  end
  
  def args=(modargs)
     @args=modargs
  end
  
  def results
    @capture
  end
   
  def generate_whitelist
    whitelist = []
    whitelist << /#{@args[:module_name]}/ # Add exploit

    # nil = not set, empty = manually set to load nothing
    encoder_val   = nil
    nops_val      = nil
    post_val      = nil
    payload_param = ''
    junk_args     = []

    @args[:params].each { |args|
      var, val = args.split('=', 2)
      next if val.nil?

      case var.downcase
      when 'payload'
        payload_param = val
        if val.empty?
          junk_args << args
        else
          whitelist.concat(guess_payload_name(val))
        end

      when 'encoder'
        encoder_val = val
        if val.empty?
          junk_args << args
        else
          whitelist.concat(guess_encoder_name(val))
        end

      when 'nop'
        nops_val = val
        if val.empty?
          junk_args << args
        else
          whitelist.concat(guess_nop_name(val))
        end

      when 'post'
        post_val = val
        if val.empty?
          junk_args << args
        else
          whitelist.concat(guess_post_name(val))
        end
      end
    }
    
    # Cleanup empty args
    junk_args.each { |args| @args[:params].delete(args) }

    # If it's an exploit and no payload set, load them all.
    if @args[:module_name] !~ /auxiliary\// and payload_param.empty?
      whitelist << /payloads\/.+/
    end

    # Add post modules list if not set
    if post_val.nil?
      whitelist << /post\/.+/
    end

    # Add default encoders if not set
    # This one is needed no matter what
    whitelist << /encoders\/generic\/*/
    if encoder_val.nil?
      if payload_param =~ /^.+\.x64.+/
        whitelist << /encoders\/x64\/.+/
      elsif payload_param =~ /^.+\.x86.+/
        whitelist << /encoders\/x86\/.+/
      else
        whitelist << /encoders\/.+/
      end
    end

    # Add default NOP modules if not set
    if nops_val.nil?
      whitelist << /nops\/.+/
    end

    whitelist
  end

  def init_modules
      @framework = Msf::Simple::Framework.create({'DeferModuleLoads'=>true,'DisableDatabase'=>true})
      #$stdout.puts "[*] Initializing modules..."
  
      module_name = @args[:module_name]
      modules = {
        :module  => nil,  # aux or exploit instance
        :payload => nil,  # payload instanceDisableDatabase
        :encoder => nil,  # encoder instance
        :nop     => nil   # nop instance
      }
      
      whitelist = generate_whitelist
      #puts whitelist
      # Load up all the possible modules, this is where things get slow again
      @framework.init_module_paths({:whitelist=>whitelist})
      if (@framework.modules.module_load_error_by_path.length > 0)
        print("Warning: The following modules could not be loaded!\n\n")
  
        @framework.modules.module_load_error_by_path.each do |path, error|
          print("\t#{path}: #{error}\n\n")
        end
  
        return {}
      end
  
      # Determine what type of module it is
      if module_name =~ /exploit\/(.*)/
        modules[:module] = @framework.exploits.create($1)
      elsif module_name =~ /auxiliary\/(.*)/
        modules[:module] = @framework.auxiliary.create($1)
      elsif module_name =~ /post\/(.*)/
        modules[:module] = @framework.post.create($1)
      else
        modules[:module] = @framework.exploits.create(module_name)
        if modules[:module].nil?
          # Try falling back on aux modules
          modules[:module] = @framework.auxiliary.create(module_name)
        end
      end
      if modules[:module].nil?
        puts "Still nil module? Ok then, probably invalid"
        return {}
      end
  
      modules[:module].init_ui(
        Rex::Ui::Text::Input::Stdio.new,
        Rex::Ui::Text::Output::Stdio.new
      )
  
      # Import options
      begin
        modules[:module].datastore.import_options_from_s(@args[:params].join('_|_'), '_|_')
      rescue Rex::ArgumentParseError => e
        raise e
      end
  
      # Create the payload to use
      if (modules[:module].datastore['PAYLOAD'])
        modules[:payload] = @framework.payloads.create(modules[:module].datastore['PAYLOAD'])
        if modules[:payload]
          modules[:payload].datastore.import_options_from_s(@args[:params].join('_|_'), '_|_')
        end
      end
  
      # Create the encoder to use
      if modules[:module].datastore['ENCODER']
        modules[:encoder] = @framework.encoders.create(modules[:module].datastore['ENCODER'])
        if modules[:encoder]
          modules[:encoder].datastore.import_options_from_s(@args[:params].join('_|_'), '_|_')
        end
      end
  
      # Create the NOP to use
      if modules[:module].datastore['NOP']
        modules[:nop] = @framework.nops.create(modules[:module].datastore['NOP'])
        if modules[:nop]
          modules[:nop].datastore.import_options_from_s(@args[:params].join('_|_'), '_|_')
        end
      end
  
      modules
  end
    
  def execute_module(m)
      buf = Rex::Ui::Text::Output::Buffer.new
      con = Msf::Ui::Console::Driver.new(
            Msf::Ui::Console::Driver::DefaultPrompt,
            Msf::Ui::Console::Driver::DefaultPromptChar, {'Framework' => @framework,'DisableBanner' => true,'LocalOutput' => buf})
      con.disable_output = true
      module_class = (m[:module].fullname =~ /^auxiliary/ ? 'auxiliary' : 'exploit')
      con.run_single("use #{module_class}/#{m[:module].refname}")
      @args[:params].each do |arg|
          k,v = arg.split("=", 2)
          con.run_single("set #{k} #{v}")
      end
      con.run_single("exploit")
      if @framework.sessions.length > 0 or @framework.jobs.length > 0
        con.run
      else
        con.run_single("quit")
      end
      @capture=buf.dump_buffer
  end
  
  def run!
      require 'fastlib'
      require 'msf/ui'
      require 'msf/base'

      begin
        modules = init_modules
      rescue Rex::ArgumentParseError => e
        puts "[!] Error: #{e.message}\n\n"
        exit
      end
      
      if modules[:module].nil?
        puts "Invalid module name"
        exit
      end
  
      Msf::Ui::Common.process_cli_arguments(@framework, @args[:params])
      execute_module(modules)
      #$stdout.puts
  end
end
